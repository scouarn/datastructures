#include "matrix.h"
#include "utils.h"

#include <math.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>


vector M_vec_make(int dim) {
	vector vec = (vector) malloc(dim*sizeof(var));
	M_assert(vec != NULL, "Couldn't create vector.");
	return vec;
}

matrix M_mat_make(int rows, int cols) {

	/* first, build an array of pointers */
	matrix mat = (matrix) malloc(rows*sizeof(vector));
	M_assert(mat != NULL, "Couldn't create matrix pointer table.");

	/* allocate the block of memory that holds the data */
	mat[0] = (vector) malloc(rows*cols*sizeof(var));
	M_assert(mat[0] != NULL, "Couldn't allocate memory chunk to matrix.");

	/* set each pointer to a row in the matrix */ 
	for (int i = 1; i < rows; i++) mat[i] = mat[i-1] + cols;

	return mat;
}


void M_vec_free(vector vec) {
	free(vec);
}

void M_mat_free(matrix mat) {
	free(mat[0]); /* free data chunk */
	free(mat); 	  /* free array of pointers*/
}


void M_vec_print(vector vec, int dim) {
	printf("[");
	for (int i = 0; i < dim-1; i++) printf("%g, ", vec[i]);
	printf("%g]", vec[dim-1]);
}

void M_mat_print(matrix mat, int rows, int cols) {

	for (int i = 0; i < rows-1; i++)
	{
		M_vec_print(mat[i], cols);
		printf("\n");
	}
	M_vec_print(mat[rows-1], cols);
}




var M_vec_dot(vector a, vector b, int dim) {
	var sum = 0.0;
	for (int i = 0; i < dim; i++) sum += a[i] * b[i];
	return sum;
}

var M_vec_normsq(vector vec, int dim) {
	return M_vec_dot(vec, vec, dim);
}

var M_vec_norm(vector vec, int dim) {
	return sqrt(M_vec_normsq(vec, dim));
}

var M_mat_trace(matrix mat, int dim) {
	var sum = 0.0;
	for (int i = 0; i < dim; i++) sum += mat[i][i];
	return sum;
}

var M_mat_det(matrix mat, int dim) {
	/*TODO*/
	return 0;
}




void M_vec_copy(vector res, vector vec, int dim) {
	for (int i = 0; i < dim; i++) res[i] = vec[i];
}

void M_vec_add(vector res, vector a, vector b, int dim) {
	for (int i = 0; i < dim; i++) res[i] = a[i] + b[i];
}

void M_vec_scale(vector res, vector vec, var s, int dim) {
	for (int i = 0; i < dim; i++) res[i] = s*vec[i];	
}




void M_from_vec(matrix res, vector vec, int rows, int cols, int vdim) { 
	for (int i = 0; i < rows; i++)
		for (int j = 0; j < cols; j++) 
			res[i][j] = vec[(i+j*cols)%vdim];
}

void M_extract_row(vector res, matrix mat, int row, int cols, int vdim) {
	for (int i = 0; i < vdim; i++) res[i] = mat[row][i];
}

void M_extract_col(vector res, matrix mat, int rows, int col, int vdim) {
	for (int i = 0; i < vdim; i++) res[i] = mat[i][col];
}



void M_mat_copy(matrix res, matrix mat, int rows, int cols) {
	for (int i = 0; i < rows; i++) M_vec_copy(res[i], mat[i], cols);
}

void M_mat_add(matrix res, matrix a, matrix b, int rows, int cols) {
	for (int i = 0; i < rows; i++) M_vec_add(res[i], a[i], b[i], cols);
}

void M_mat_scale(matrix res, matrix mat, var s, int rows, int cols) {
	for (int i = 0; i < rows; i++) M_vec_scale(res[i], mat[i], s, cols);
}




void M_mat_transpose(matrix res, matrix mat, int rows, int cols) {
	for (int i = 0; i < rows; i++)
		for (int j = 0; j < cols; j++) 
			res[j][i] = mat[i][j];
}

void mat_invert(matrix res, matrix, int dim) {
	/*TODO*/
}

void linsolve(matrix res, matrix mat, vector vec, int dim) {
	/*TODO*/
}




void M_mat_ab  (matrix res, matrix a, matrix b, int arows, int acols, int brows, int bcols) {
	M_assert(arows == bcols, "Matrix multiplication dimension error.");

	for (int i = 0; i < acols; i++)
		for (int j = 0; j < brows; j++) 
		{
			res[i][j] = 0.0;
			for (int k = 0; k < arows; k++) res[i][j] += a[i][k] * b[k][j];
		}

}

void M_mat_aTb (matrix res, matrix a, matrix b, int arows, int acols, int brows, int bcols) {
	M_assert(acols == bcols, "Matrix multiplication dimension error.");

	for (int i = 0; i < arows; i++)
		for (int j = 0; j < brows; j++) 
		{
			res[i][j] = 0.0;
			for (int k = 0; k < acols; k++) res[i][j] += a[k][i] * b[k][j];
		}
}

void M_mat_abT (matrix res, matrix a, matrix b, int arows, int acols, int brows, int bcols) {
	M_assert(arows == brows, "Matrix multiplication dimension error.");

	for (int i = 0; i < acols; i++)
		for (int j = 0; j < bcols; j++) 
		{
			res[i][j] = 0.0;
			for (int k = 0; k < arows; k++) res[i][j] += a[i][k] * b[j][k];
		}
}

void M_mat_aTbT(matrix res, matrix a, matrix b, int arows, int acols, int brows, int bcols) {
	M_assert(acols == brows, "Matrix multiplication dimension error.");

	for (int i = 0; i < arows; i++)
		for (int j = 0; j < bcols; j++) 
		{
			res[i][j] = 0.0;
			for (int k = 0; k < acols; k++) res[i][j] += a[k][i] * b[j][k];
		}
}

